akka.remote{

	# Forces Akka.Remote to load the diagnostic transport
	enabled-transports = ["akka.remote.dot-netty.diagnostic.tcp"]

	dot-netty.diagnostic.tcp {
      # The class given here must implement the akka.remote.transport.Transport
      # interface and offer a public constructor which takes two arguments:
      #  1) akka.actor.ExtendedActorSystem
      #  2) com.typesafe.config.Config
      transport-class = "Akka.Remote.DiagnosticDotNettyTransport.TcpTransport,Akka.Remote.DiagnosticDotNettyTransport"

      # Transport drivers can be augmented with adapters by adding their
      # name to the applied-adapters list. The last adapter in the
      # list is the adapter immediately above the driver, while
      # the first one is the top of the stack below the standard
      # Akka protocol
      applied-adapters = []

      transport-protocol = tcp

	  # Diagnostic settings for anaylzing pooled IByteBufAllocators usage in DotNetty
	  # can be used to track buffer and memory leaks. 
	  allocator-dumps{
		# Enables recording for buffer dumps for pooled IByteBufAllocators in DotNetty.
		enabled = on

		# The sample rate for capturing buffer dumps.
		# Turn this setting to a lower value if there are too many buffer dump messages being
		# recorded in the logs.
		sample-rate = 1.0
	  }

	  # Turns the DotNetty resource leak detector on
	  # Supports the following values:
	  #		Disabled - the default, which is also the most minimally invasive
	  #		Simple - the lowest possible setting
	  #		Advanced - more detailed
	  #		Paranoid - captures EVERYTHING and has a significant performance impact.
	  #				   only use while testing.
	  resource-leak-level = simple

	  # Flag used to capture DotNetty logs into the Akka.NET EventStream
	  capture-dotnetty-logs = on

	  # Byte order used for network communication. Event thou DotNetty is big-endian
	  # by default, we need to switch it back to little endian in order to support
	  # backward compatibility with Helios.
	  byte-order = "little-endian"

      # The default remote server port clients should connect to.
      # Default is 2552 (AKKA), use 0 if you want a random available port
      # This port needs to be unique for each actor system on the same machine.
      port = 2552

      # Similar in spirit to "public-hostname" setting, this allows Akka.Remote users
      # to alias the port they're listening on. The socket will actually listen on the
      # "port" setting, but when connecting to other ActorSystems this node will advertise
      # itself as being connected to the "public-port". This is helpful when working with 
      # hosting environments that rely on address translation and port-forwarding, such as Docker.
      #
      # Leave this setting to "0" if you don't intend to use it.
      public-port = 0

      # The hostname or ip to bind the remoting to,
      # InetAddress.getLocalHost.getHostAddress is used if empty
      hostname = ""

	  # If this value is set, this becomes the public address for the actor system on this
	  # transport, which might be different than the physical ip address (hostname)
	  # this is designed to make it easy to support private / public addressing schemes
	  public-hostname = ""

	  # If set to true, we will use IPV6 addresses upon DNS resolution for host names.
	  # Otherwise, we will use IPV4.
	  dns-use-ipv6 = false

	  # If set to true, we will enforce usage of IPV4 or IPV6 addresses upon DNS resolution for host names.
	  # If dns-use-ipv6 = true, we will use IPV6 enforcement
	  # Otherwise, we will use IPV4.
	  # Warning: when ip family is enforced, any connection between IPV4 and IPV6 is impossible
	  #
	  # enforce-ip-family setting is used only in some special cases, when default behaviour of 
	  # underlying sockets leads to errors. Typically this occurs when an environment doesn't support
	  # IPV6 or dual-mode sockets.
	  # As of 09/21/2016 there are two known cases: running under Mono and in Azure WebApp  
	  # for them we will need enforce-ip-family = true, and for Azure dns-use-ipv6 = false
	  # This property is always set to true if Mono runtime is detected.

	  enforce-ip-family = false

      # Enables SSL support on this transport
      enable-ssl = false

	  # Enables backwards compatibility with Akka.Remote clients running Helios 1.*
	  enable-backwards-compatibility = false

      # Sets the connectTimeoutMillis of all outbound connections,
      # i.e. how long a connect may take until it is timed out
      connection-timeout = 15 s

      # Toggles buffer pooling on and off inside DotNetty.
      # Only intended to be a work-around for users who are still running on DotNetty v0.4.6-v0.4.7
      # for the following bug: https://github.com/akkadotnet/akka.net/issues/3370
      enable-pooling = true

      # If set to "<id.of.dispatcher>" then the specified dispatcher
      # will be used to accept inbound connections, and perform IO. If "" then
      # dedicated threads will be used.
      # Please note that the Helios driver only uses this configuration and does
      # not read the "akka.remote.use-dispatcher" entry. Instead it has to be
      # configured manually to point to the same dispatcher if needed.
      use-dispatcher-for-io = ""

      # Sets the high water mark for the in and outbound sockets,
      # set to 0b for platform default
      write-buffer-high-water-mark = 0b

      # Sets the low water mark for the in and outbound sockets,
      # set to 0b for platform default
      write-buffer-low-water-mark = 0b

      # Sets the send buffer size of the Sockets,
      # set to 0b for platform default
      send-buffer-size = 256000b

      # Sets the receive buffer size of the Sockets,
      # set to 0b for platform default
      receive-buffer-size = 256000b

      # Maximum message size the transport will accept, but at least
      # 32000 bytes.
      # Please note that UDP does not support arbitrary large datagrams,
      # so this setting has to be chosen carefully when using UDP.
      # Both send-buffer-size and receive-buffer-size settings has to
      # be adjusted to be able to buffer messages of maximum size.
      maximum-frame-size = 128000b

      # Sets the size of the connection backlog
      backlog = 4096

      # Enables the TCP_NODELAY flag, i.e. disables Nagleâ€™s algorithm
      tcp-nodelay = on

      # Enables TCP Keepalive, subject to the O/S kernelâ€™s configuration
      tcp-keepalive = on

      # Enables SO_REUSEADDR, which determines when an ActorSystem can open
      # the specified listen port (the meaning differs between *nix and Windows)
      # Valid values are "on", "off" and "off-for-windows"
      # due to the following Windows bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4476378
      # "off-for-windows" of course means that it's "on" for all other platforms
      tcp-reuse-addr = on

      # Used to configure the number of I/O worker threads on server sockets
      server-socket-worker-pool {
        # Min number of threads to cap factor-based number to
        pool-size-min = 2

        # The pool size factor is used to determine thread pool size
        # using the following formula: ceil(available processors * factor).
        # Resulting size is then bounded by the pool-size-min and
        # pool-size-max values.
        pool-size-factor = 1.0

        # Max number of threads to cap factor-based number to
        pool-size-max = 2
      }

      # Used to configure the number of I/O worker threads on client sockets
      client-socket-worker-pool {
        # Min number of threads to cap factor-based number to
        pool-size-min = 2

        # The pool size factor is used to determine thread pool size
        # using the following formula: ceil(available processors * factor).
        # Resulting size is then bounded by the pool-size-min and
        # pool-size-max values.
        pool-size-factor = 1.0

        # Max number of threads to cap factor-based number to
        pool-size-max = 2
      }

    }
}